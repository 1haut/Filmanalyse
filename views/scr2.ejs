<%- include('partials/header.ejs') %>
<%- include('partials/body.ejs', data) %>
<script>
      // Register ChartDataLabel plugin
      Chart.register(ChartDataLabels);
      Chart.defaults.font.family = "'Outfit', sans-serif";

      const colorWheel = [
        "#003a7d",
        "#008dff",
        "#ff73b6",
        "#c701ff",
        "#4ecb8d",
        "#ff9d3a",
        "#f9e858",
        "#d83034",
      ];
      const infoButtons = document.querySelectorAll(".popover-btn");
      const infoBoxes = document.querySelectorAll(".popover-text");

      const navBtns = document.querySelectorAll("#nav-button-1 .btn");
      
      navBtns.forEach((btn, index) => {
        if (index === 1) {
          btn.classList.add("active");
        }
      });

      for (let i = 0; i < infoButtons.length; i++) {
        infoButtons[i].addEventListener("mouseenter", () => {
          infoBoxes[i].style.display = "block";
        });

        infoButtons[i].addEventListener("mouseleave", () => {
          infoBoxes[i].style.display = "none";
        });
      }

      const canvases = document.querySelectorAll(".chart-canvas")

      const charts = document.querySelectorAll(".chart");

      async function loadCSV(path) {
        const response = await fetch(path);
        const text = await response.text();

        const rows = text.trim().split("\n");

        const headerRow = rows.shift();

        const titles = headerRow.replace(/"/g, "").split(",").slice(1);

        const labels = [];
        const data = [];

        rows.forEach((row) => {
          const [label, ...values] = row.replace(/"/g, "").split(",");
          labels.push(label);

          values.forEach((val, i) => {
            data[i] = [...(data[i] ?? []), Number(val)];
          });
        });

        return [labels, data, titles];
      }

      async function drawCharts() {
        const [labels1, data1, title1] = await loadCSV("data/num_movies.csv");
        const [labels2, data2, title2] = await loadCSV(
          "data/movies_one_genre_per_genre.csv"
        );
        const [labels3, data3, title3] = await loadCSV(
          "data/common_combos.csv"
        );

        try {
          const ctx1 = new Chart(canvases[0], {
            type: "pie",
            data: {
              labels: labels1,
              datasets: [
                {
                  label: title1[0],
                  data: data1[0],
                  backgroundColor: [
                    "rgb(255, 99, 132)",
                    "rgb(54, 162, 235)",
                    "rgb(255, 205, 86)",
                    "#00D100",
                  ],
                  hoverOffset: 4,
                },
              ],
            },
            options: {
              responsive: true,
            },
          });
        } catch (err) {
          return;
        }

        try {
          const ctx2 = new Chart(canvases[1], {
            type: "pie",
            data: {
              labels: labels2,
              datasets: [
                {
                  label: title2[0],
                  data: data2[0],
                  backgroundColor: colorWheel,
                  hoverOffset: 4,
                },
              ],
            },
            options: {
              responsive: true,
            },
          });
        } catch (err) {
          return;
        }

        try {
          const ctx3 = new Chart(canvases[2], {
            type: "bar",
            data: {
              labels: labels3,
              datasets: [
                {
                  label: title3[0],
                  data: data3[0],
                  borderWidth: 0,
                  backgroundColor: "#0099de",
                  borderColor: "#6fd2ff",
                },
              ],
            },
            options: {
              scales: {
                y: {},
              },
              aspectRatio: 1,
            },
          });
        } catch (err) {
          return;
        }

        try {
          const ctx4 = new Chart(canvases[3], cfg);
        } catch (err) {
          return;
        }
      }

      function checkChartsOnCanvases() {
        canvases.forEach((id, index) => {
          const canvasDisplay = Chart.getChart(canvases[index]);
          if (!canvasDisplay) {
            charts[index].hidden = true;
            infoButtons[index].hidden = true;
          }
        });
      }


      document.addEventListener("DOMContentLoaded", async () => {
        await drawCharts();
        checkChartsOnCanvases();
      });
    </script>
  </body>
</html>
